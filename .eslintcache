[{"C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\index.js":"1","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\reportWebVitals.js":"2","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\App.js":"3","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\Routes.js":"4","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\containers\\Auth.jsx":"5","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\containers\\Agenda.jsx":"6","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\containers\\ListSelection.jsx":"7","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\containers\\Journal.jsx":"8","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\containers\\FitnessTracker.jsx":"9","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\containers\\JournalEntry.jsx":"10","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\components\\AppBar.jsx":"11","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\components\\Drawer.jsx":"12","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\store\\Store.js":"13","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\store\\reducers\\index.js":"14","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\store\\reducers\\Auth.Reducer.js":"15","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\store\\actions\\types.js":"16","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\shared\\utility.js":"17","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\store\\actions\\Auth.Action.js":"18","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\store\\reducers\\Todo.Reducer.js":"19","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\store\\actions\\ToDo.Action.js":"20","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\containers\\GoalList.jsx":"21"},{"size":500,"mtime":499162500000,"results":"22","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"23"},{"size":725,"mtime":1611436133672,"results":"25","hashOfConfig":"23"},{"size":1500,"mtime":1611863041312,"results":"26","hashOfConfig":"23"},{"size":3868,"mtime":1611449091288,"results":"27","hashOfConfig":"23"},{"size":121,"mtime":1611191646628,"results":"28","hashOfConfig":"23"},{"size":11958,"mtime":1612833785674,"results":"29","hashOfConfig":"23"},{"size":123,"mtime":1611191732663,"results":"30","hashOfConfig":"23"},{"size":5957,"mtime":1612838611095,"results":"31","hashOfConfig":"23"},{"size":443,"mtime":1612838967960,"results":"32","hashOfConfig":"23"},{"size":1157,"mtime":1611198036236,"results":"33","hashOfConfig":"23"},{"size":4172,"mtime":1611197128051,"results":"34","hashOfConfig":"23"},{"size":1230,"mtime":1611436014072,"results":"35","hashOfConfig":"23"},{"size":182,"mtime":1611765121649,"results":"36","hashOfConfig":"23"},{"size":1532,"mtime":1611435007069,"results":"37","hashOfConfig":"23"},{"size":691,"mtime":1611764810032,"results":"38","hashOfConfig":"23"},{"size":142,"mtime":1611434153017,"results":"39","hashOfConfig":"23"},{"size":2733,"mtime":1611613959003,"results":"40","hashOfConfig":"23"},{"size":1128,"mtime":1611765174953,"results":"41","hashOfConfig":"23"},{"size":1765,"mtime":1611764742901,"results":"42","hashOfConfig":"23"},{"size":5605,"mtime":1612834260160,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"13jo327",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"46"},"C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\index.js",[],["94","95"],"C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\reportWebVitals.js",[],"C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\App.js",["96","97"],"import React, {useState, useEffect}from \"react\";\nimport \"./App.css\";\nimport Routes from \"./Routes\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store/Store\";\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport green from '@material-ui/core/colors/green';\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nfunction App() {\n\n  const theme = createMuiTheme({\n    palette: {\n      primary: blue,\n      secondary: green,\n    },\n    status: {\n      danger: 'orange',\n    },\n  });\n\n\n\n  return (\n    <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <Routes />\n      </ThemeProvider>\n    </Provider>\n  );\n}\n\nexport default App;\n","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\Routes.js",["98","99","100","101"],"import React, { useState, useEffect } from 'react';\r\nimport {\r\n  BrowserRouter,\r\n  Route,\r\n  Redirect,\r\n  Switch\r\n} from 'react-router-dom';\r\n\r\nimport Auth from './containers/Auth.jsx';\r\nimport FitnessTracker from './containers/FitnessTracker.jsx';\r\nimport Agenda from './containers/Agenda.jsx';\r\nimport Journal from './containers/Journal.jsx';\r\nimport JournalEntry from './containers/JournalEntry.jsx';\r\nimport ListSelection from './containers/ListSelection.jsx';\r\nimport GoalList from './containers/GoalList'\r\n\r\nimport AppBar from './components/AppBar.jsx';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as actions from './store/actions/Auth.Action'\r\n\r\nconst Routes =() =>{\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  useEffect (() => { \r\n   dispatch(actions.authCheckState())\r\n      \r\n  \r\n  },  []  );\r\n\r\n\r\n  \r\n    return(\r\n        <BrowserRouter>\r\n        <AppBar/>\r\n        <Switch>\r\n        <Route path ='/' exact component={Auth}/>\r\n        <Route path ='/signup' exact component={Auth}/>\r\n        <Route path ='/ListSelection' exact component={ListSelection}/>\r\n        <Route path ='/GoalList' exact component={GoalList}/>\r\n        <Route path ='/Agenda' exact component={Agenda}/>\r\n        <Route path ='/FitnessTracker' exact component={FitnessTracker}/>\r\n        <Route path ='/JournalEntry' exact component={JournalEntry}/>\r\n        <Route path ='/Journal' exact component={Journal}/>\r\n        </Switch>\r\n        </BrowserRouter>\r\n    );\r\n\r\n}\r\n\r\nexport default Routes","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\containers\\Auth.jsx",["102","103","104","105","106"],"import React, { useState } from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { GiKeyLock } from \"react-icons/gi\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { green } from \"@material-ui/core/colors\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport * as action from \"../store/actions/Auth.Action\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  green: {\r\n    color: \"#fff\",\r\n    backgroundColor: green[500],\r\n  },\r\n\r\n  spaceBetween: {\r\n    marginTop: \"1rem\",\r\n  },\r\n}));\r\n\r\nconst Auth = () => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n\r\n  const auth = useSelector((state) => state.Auth);\r\n\r\n  const [isSignup, setIsSignup] = useState(false);\r\n  const [values, setValues] = useState({\r\n    email: \"\",\r\n    password: \"\",\r\n    error: \"\",\r\n    loading: false,\r\n    redirectToReferrer: false,\r\n  });\r\n\r\n  const { email, password, loading, error, redirectToReferrer } = values;\r\n\r\n  const handleChange = (name) => (event) => {\r\n    setValues({ ...values, error: false, [name]: event.target.value });\r\n  };\r\n\r\n  const clickSubmit = (event) => {\r\n    event.preventDefault();\r\n    setValues({ ...values, error: false, loading: true });\r\n    dispatch(action.auth(email, password, isSignup));\r\n  };\r\n\r\n  const redirectUser = () => {\r\n    if (auth.userId !== null) {\r\n      return <Redirect to='/listselection' />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Container maxWidth='md'>\r\n        <Card className='AuthTopMargin'>\r\n          <Typography\r\n            variant='h3'\r\n            color='primary'\r\n            align='center'\r\n            component='h2'>\r\n            {isSignup ? \"Sign Up\" : \"Sign In\"}\r\n          </Typography>\r\n          <Grid\r\n            container\r\n            direction='column'\r\n            justify='space-between'\r\n            alignItems='center'>\r\n            <Grid>\r\n              <Avatar className={classes.green} sizes='lg'>\r\n                <GiKeyLock />\r\n              </Avatar>\r\n            </Grid>\r\n            <form>\r\n              <Grid className={classes.spaceBetween}>\r\n                <TextField\r\n                  fullwidth\r\n                  variant='outlined'\r\n                  label='Enter Email'\r\n                  type='email'\r\n                  onChange={handleChange(\"email\")}\r\n                  value={email}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid className={classes.spaceBetween}>\r\n                <TextField\r\n                  fullwidth\r\n                  variant='outlined'\r\n                  label='Enter Password'\r\n                  type='password'\r\n                  value={password}\r\n                  onChange={handleChange(\"password\")}\r\n                />\r\n              </Grid>\r\n              <Grid className={classes.spaceBetween}>\r\n                <Button\r\n                  type='submit'\r\n                  onClick={clickSubmit}\r\n                  variant='contained'\r\n                  color='primary'\r\n                  fullWidth>\r\n                  Submit\r\n                </Button>\r\n              </Grid>\r\n              <Grid>\r\n                <Button fullWidth onClick={()=>setIsSignup(!isSignup)}>{!isSignup?'New User':'Login'} </Button>\r\n              </Grid>\r\n            </form>\r\n          </Grid>\r\n        </Card>\r\n      </Container>\r\n      {redirectUser()}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\containers\\Agenda.jsx",[],"C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\containers\\ListSelection.jsx",["107","108","109","110","111","112","113"],"import React, { useEffect, useState } from \"react\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\nimport clsx from \"clsx\";\r\nimport { IoIosSend } from \"react-icons/io\";\r\n\r\nimport {\r\n  initTodoLists,\r\n  setTodoLists,\r\n  initCompleteCount,\r\n  initTotalTasks,\r\n  setCompleteCount,\r\n} from \"../store/actions/ToDo.Action\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport GoalList from \"./GoalList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  modal: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    borderRadius: \"50%\",\r\n  },\r\n\r\n  archive: {\r\n    float: \"right\",\r\n  },\r\n}));\r\n\r\nconst ListSelection = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const userId = useSelector((state) => state.Auth.userId);\r\n  const todoLists = useSelector((state) => state.Todos.todoLists);\r\n  const completeCount = useSelector((state) => state.Todos.totalCompletes);\r\n  const totalTasks = useSelector((state) => state.Todos.totalTasks);\r\n\r\n  const [newtask, setnewtask] = useState({\r\n    title: \"\",\r\n    creator: userId,\r\n    task: \"create a list\",\r\n    isComplete: false,\r\n    isVisible: true,\r\n  });\r\n\r\n  const [openDialog, setopenDialog] = useState(false);\r\n  const [open, setOpen] = React.useState(false);\r\n  const [checked, setChecked] = React.useState([0]);\r\n  const [selected, setSelected] = useState(\"\");\r\n  const [todos, setTodos] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [inProgress, setinProgress] = React.useState(\"\");\r\n  const [timerOn, settimerOn] = React.useState(false);\r\n  const [success, setSuccess] = React.useState(false);\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    dispatch(initCompleteCount(userId));\r\n    dispatch(initTodoLists(userId));\r\n    dispatch(initTotalTasks(userId));\r\n  }, []);\r\n\r\n  const initTodos = (todoListName) => {\r\n    axios\r\n      .get(`/api/todolist/${userId}/${todoListName}`)\r\n      .then((res) => setTodos(res.data.todoData));\r\n  };\r\n\r\n  const buttonClassname = clsx({\r\n    [classes.buttonSuccess]: success,\r\n  });\r\n\r\n  const handleTimerButtonClick = (todo) => {\r\n    if (!timerOn) {\r\n      setinProgress(todo._id);\r\n      axios.patch(`/api/updateStartTime/${todo._id}`, { time: moment() });\r\n      setSuccess(false);\r\n      settimerOn(true);\r\n    } else {\r\n      axios.patch(`/api/updateEndTime/${todo._id}`, { time: moment() });\r\n      setSuccess(true);\r\n      settimerOn(false);\r\n      setTimeout(() => {\r\n        setinProgress(\"\");\r\n        setSuccess(false);\r\n      }, 2000);\r\n\r\n      initTodos(todo.title);\r\n    }\r\n  };\r\n\r\n  const handleOpen = (title) => {\r\n    setIsLoading(true);\r\n    setSelected(title);\r\n    setnewtask({\r\n      title: title,\r\n      task: \"\",\r\n      isComplete: false,\r\n      isVisible: true,\r\n      creator: userId,\r\n    });\r\n    initTodos(title);\r\n    setOpen(true);\r\n    setIsLoading(false);\r\n\r\n    console.log(selected);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setIsLoading(true);\r\n    setSelected();\r\n    setnewtask({\r\n      title: \"\",\r\n      creator: userId,\r\n      task: \"create a list\",\r\n      isComplete: false,\r\n      isVisible: true,\r\n    });\r\n    setOpen(false);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const handleToggleComplete = (todo) => () => {\r\n    let isCompleteData = true;\r\n    todo.isComplete == isCompleteData\r\n      ? (isCompleteData = false)\r\n      : (isCompleteData = true);\r\n\r\n    axios\r\n      .patch(`api/CompleteTodo/${todo._id}`, { isCompleteData })\r\n      .then((res) => {\r\n        axios.get(`api/todolistCompletes/${userId}`).then((res) => {\r\n          dispatch(setCompleteCount(res.data.Completes));\r\n        });\r\n      });\r\n    let dtodos = todos.map((dtodo, i) =>\r\n      dtodo._id == todo._id ? { ...todo, isComplete: isCompleteData } : todos[i]\r\n    );\r\n    setTodos(dtodos);\r\n  };\r\n\r\n  const handleToggleRoutineSwitch = (todo) => {\r\n    let isRoutineData = true;\r\n    todo.isRoutine == isRoutineData\r\n      ? (isRoutineData = false)\r\n      : (isRoutineData = true);\r\n    axios.patch(`/api/toggleRoutine/${todo._id}`, { isRoutineData });\r\n    let dtodos = todos.map((dtodo, i) =>\r\n      dtodo._id == todo._id ? { ...todo, isRoutine: isRoutineData } : todos[i]\r\n    );\r\n    setTodos(dtodos);\r\n  };\r\n\r\n  const handleSubmitNewTodoList = () => {\r\n    axios.post(\"/api/addTodo/\", { newtask }).then(() => {\r\n      dispatch(initTodoLists(userId));\r\n      dispatch(initTotalTasks(userId));\r\n    });\r\n    setnewtask({\r\n      title: \"\",\r\n      creator: userId,\r\n      task: \"create a list\",\r\n      isComplete: false,\r\n      isVisible: true,\r\n    });\r\n  };\r\n\r\n  const handleChangeNewTodoList = (event) => {\r\n    setnewtask({\r\n      [event.target.name]: event.target.value,\r\n      task: \"create a list\",\r\n      creator: userId,\r\n    });\r\n  };\r\n\r\n  const handleSubmitNewTodo = () => {\r\n    setIsLoading(true);\r\n    setnewtask({ ...newtask, title: selected });\r\n    axios.post(\"/api/addTodo\", { newtask }).then((res) => {\r\n      console.log(res.data);\r\n      let ftodos = todos;\r\n      ftodos.push(res.data);\r\n      console.log(ftodos);\r\n      setTodos(ftodos);\r\n      dispatch(initTotalTasks(userId));\r\n      setIsLoading(false);\r\n      setnewtask({\r\n        title: selected,\r\n        task: \"\",\r\n        isComplete: false,\r\n        isVisible: true,\r\n        creator: userId,\r\n      });\r\n    });\r\n  };\r\n\r\n  const handleChangeNewTask = (event) => {\r\n    setnewtask({ ...newtask, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const handleArchiveComplete = (archiveStatus, todoListName) => {\r\n    setIsLoading(true);\r\n    let isVisibleData = archiveStatus;\r\n    axios\r\n      .patch(`api/archiveTodo/${userId}/${todoListName}`, { isVisibleData })\r\n      .then(\r\n        axios\r\n          .get(`/api/todolist/${userId}/${todoListName}`)\r\n          .then((res) => setTodos(res.data.todoData))\r\n      );\r\n    setIsLoading(false);\r\n  };\r\n\r\n  return (\r\n    <Container maxWidth='lg'>\r\n      <Card>\r\n        <Grid container direction='row' justify='center' alignItems='center'>\r\n          <Grid item xs={10}>\r\n            <TextField\r\n              name='title'\r\n              label='Enter New Goal List'\r\n              fullWidth\r\n              margin='normal'\r\n              value={newtask.title}\r\n              onChange={(e) => handleChangeNewTodoList(e)}\r\n              InputProps={{\r\n                endAdornment: (\r\n                  <InputAdornment position='end'>\r\n                    <IconButton onClick={handleSubmitNewTodoList}>\r\n                      <IoIosSend />\r\n                    </IconButton>\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant='caption' color='initial'>\r\n              Completed Total of {completeCount} tasks of {totalTasks} tasks\r\n              created!\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Card>\r\n      <Grid\r\n        container\r\n        direction='row'\r\n        justify='space-evenly'\r\n        alignItems='flex-start'>\r\n        <Grid item xs={3}>\r\n          <Card className='AuthTopMargin'>\r\n            <CardActions onClick={() => handleOpen(\"TodaysAgenda\")}>\r\n              <Grid\r\n                container\r\n                direction='row'\r\n                justify='center'\r\n                alignItems='center'>\r\n                <Grid item>\r\n                  <Typography variant='h4' align='center'>\r\n                    Todays Agenda\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </CardActions>\r\n          </Card>\r\n\r\n          <Card className='AuthTopMargin'>\r\n            <CardActions onClick={() => handleOpen(\"InCompletes\")}>\r\n              <Grid\r\n                container\r\n                direction='row'\r\n                justify='center'\r\n                alignItems='center'>\r\n                <Grid item>\r\n                  <Typography variant='h4' align='center'>\r\n                    In Completes\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </CardActions>\r\n          </Card>\r\n\r\n          <Card className='AuthTopMargin'>\r\n            <CardActions onClick={() => handleOpen(\"OverDue\")}>\r\n              <Grid\r\n                container\r\n                direction='row'\r\n                justify='center'\r\n                alignItems='center'>\r\n                <Grid item>\r\n                  <Typography variant='h4' align='center'>\r\n                    Over Due\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </CardActions>\r\n          </Card>\r\n          <Card className='AuthTopMargin'>\r\n          <CardActions onClick={() => handleOpen(\"ActiveRoutines\")}>\r\n            <Grid\r\n              container\r\n              direction='row'\r\n              justify='center'\r\n              alignItems='center'>\r\n              <Grid item>\r\n                <Typography variant='h4' align='center'>\r\n                  Active Routines\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </CardActions>\r\n        </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={8}>\r\n          {todoLists.map((title) => (\r\n            <Card key={title} className='AuthTopMargin'>\r\n              <CardActions onClick={() => handleOpen(title)}>\r\n                <Grid\r\n                  container\r\n                  direction='row'\r\n                  justify='center'\r\n                  alignItems='center'>\r\n                  <Grid item>\r\n                    <Typography variant='h4' align='center'>\r\n                      {title}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </CardActions>\r\n            </Card>\r\n          ))}\r\n\r\n          <Modal\r\n            aria-labelledby='transition-modal-title'\r\n            aria-describedby='transition-modal-description'\r\n            className={classes.modal}\r\n            open={open}\r\n            onClose={handleClose}\r\n            closeAfterTransition\r\n            BackdropComponent={Backdrop}\r\n            BackdropProps={{\r\n              timeout: 500,\r\n            }}>\r\n            <Fade in={open}>\r\n              {isLoading === false ? (\r\n                <GoalList\r\n                  title={selected}\r\n                  handleToggle={handleToggleComplete}\r\n                  checked={checked}\r\n                  todos={todos}\r\n                  handleSubmitNewTodo={handleSubmitNewTodo}\r\n                  handleChangeNewTask={handleChangeNewTask}\r\n                  newtask={newtask}\r\n                  handleArchiveComplete={handleArchiveComplete}\r\n                  handleToggleRoutineSwitch={handleToggleRoutineSwitch}\r\n                  openDialog={openDialog}\r\n                  setopenDialog={setopenDialog}\r\n                  isLoading={isLoading}\r\n                  inProgress={inProgress}\r\n                  handleTimerButtonClick={handleTimerButtonClick}\r\n                  buttonClassname={buttonClassname}\r\n                  timerOn={timerOn}\r\n                  success={success}\r\n                />\r\n              ) : (\r\n                <CircularProgress />\r\n              )}\r\n            </Fade>\r\n          </Modal>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ListSelection;\r\n","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\containers\\Journal.jsx",[],"C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\containers\\FitnessTracker.jsx",[],"C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\containers\\JournalEntry.jsx",[],"C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\components\\AppBar.jsx",["114","115"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { MdMenu } from \"react-icons/md\";\r\nimport { GiCyberEye } from \"react-icons/gi\";\r\nimport Drawer from './Drawer';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginBottom:'20px'\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    textDecoration:'line-through'\r\n  },\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position='static'>\r\n        <Toolbar>\r\n        <IconButton color='inherit'><GiCyberEye/></IconButton>\r\n       \r\n          <Typography variant='h6' className={classes.title} >\r\n            Productive\r\n          </Typography>\r\n       \r\n          <Drawer/>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\components\\Drawer.jsx",[],"C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\store\\Store.js",["116","117"],"import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools, actionCreators } from \"redux-devtools-extension\";\r\n// middlewares\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport logger from \"redux-logger\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\n\r\nfunction saveToLocalStorage(state) {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem(\"state\", serializedState);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n}\r\n\r\nfunction loadFromLocalStorage() {\r\n  try {\r\n    const serializedState = localStorage.getItem(\"state\");\r\n    if (serializedState === null) return undefined;\r\n    return JSON.parse(serializedState);\r\n  } catch (e) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nconst persistedState = loadFromLocalStorage();\r\n\r\n/**\r\n * Create a Redux store that holds the app state.\r\n * \r\n \r\n */\r\nconst composeEnhancers = composeWithDevTools({\r\n  name: `Redux`,\r\n  realtime: true,\r\n  trace: true,\r\n  traceLimit: 25,\r\n});\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  persistedState,\r\n  composeEnhancers(applyMiddleware(thunkMiddleware, logger))\r\n);\r\n\r\nstore.subscribe(() => {\r\n    saveToLocalStorage(store.getState());\r\n  \r\n  });\r\n\r\nexport default store;\r\n","C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\store\\reducers\\index.js",[],"C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\store\\reducers\\Auth.Reducer.js",[],"C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\store\\actions\\types.js",[],"C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\shared\\utility.js",[],"C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\store\\actions\\Auth.Action.js",[],"C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\store\\reducers\\Todo.Reducer.js",[],"C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\store\\actions\\ToDo.Action.js",[],"C:\\Users\\odess\\Desktop\\GNB Productivity\\client\\src\\containers\\GoalList.jsx",["118","119","120"],"import React from \"react\";\r\nimport {\r\n  Typography,\r\n  TextField,\r\n  InputAdornment,\r\n  IconButton,\r\n  makeStyles,\r\n  Card,\r\n  List,\r\n  ListItemText,\r\n  Checkbox,\r\n  Switch,\r\n  ListItem,\r\n  ListItemIcon,\r\n  Grid,\r\n  CircularProgress,\r\n  Fab,\r\n} from \"@material-ui/core\";\r\nimport clsx from \"clsx\";\r\nimport { green } from \"@material-ui/core/colors\";\r\nimport { IoIosSend } from \"react-icons/io\";\r\nimport { BiArchiveOut, BiArchiveIn } from \"react-icons/bi\";\r\nimport { GiClockwork, GiMonumentValley } from \"react-icons/gi\";\r\nimport { MdCheck } from \"react-icons/md\";\r\nimport axios from \"axios\";\r\nimport moment from \"moment\";\r\n\r\nconst GoalList = (props) => {\r\n  const useStyles = makeStyles((theme) => ({\r\n    paper: {\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: \"1px solid #000\",\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(7, 10, 7),\r\n    },\r\n\r\n    root: {\r\n      width: '100%',\r\n      maxWidth: 400,\r\n      backgroundColor: theme.palette.background.paper,\r\n      position: 'relative',\r\n      overflow: 'auto',\r\n      maxHeight: 400,\r\n      \r\n    },\r\n\r\n    fabProgress: {\r\n      color: green[500],\r\n      position: \"absolute\",\r\n      top: -6,\r\n      left: -6,\r\n      zIndex: 1,\r\n    },\r\n\r\n    wrapper: {\r\n      margin: theme.spacing(1),\r\n      position: \"relative\",\r\n    },\r\n\r\n    archive: {\r\n      float: \"right\",\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n  \r\n\r\n  return (\r\n    <div className={classes.paper}>\r\n      {props.isLoading === false ? (\r\n        <div>\r\n          <Typography variant='h2'>{props.title}</Typography>\r\n          {props.title !== \"TodaysAgenda\" &&\r\n          props.title !== \"InCompletes\" &&\r\n          props.title !== \"OverDue\" &&\r\n          props.title !== \"ActiveRoutines\" ? (\r\n            <div>\r\n              <TextField\r\n                id='standard-basic'\r\n                label='Enter New Goal'\r\n                fullWidth\r\n                margin='normal'\r\n                name='task'\r\n                value={props.newtask.task}\r\n                onChange={(e) => props.handleChangeNewTask(e)}\r\n                InputProps={{\r\n                  endAdornment: (\r\n                    <InputAdornment position='end'>\r\n                      <IconButton onClick={(e) => props.handleSubmitNewTodo(e)}>\r\n                        <IoIosSend />\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n\r\n              <IconButton\r\n                onClick={() => props.handleArchiveComplete(false, props.title)}>\r\n                <BiArchiveIn />\r\n              </IconButton>\r\n              <IconButton className={classes.archive}>\r\n                <BiArchiveOut\r\n                  onClick={() => props.handleArchiveComplete(true, props.title)}\r\n                />\r\n              </IconButton>\r\n            </div>\r\n          ) : null}\r\n          <Card>\r\n            <List className={classes.root} >\r\n              {props.todos.map((todo) => {\r\n                return todo.isVisible === true ? (\r\n                  <Grid\r\n                    container\r\n                    direction='row'\r\n                    justify='space-between'\r\n                    alignItems='center'>\r\n                    <ListItem key={todo._id} divider>\r\n                    \r\n                      <ListItemIcon>\r\n                        <Switch\r\n                          color='primary'\r\n                          checked={todo.isRoutine}\r\n                          onChange={() => props.handleToggleRoutineSwitch(todo)}\r\n                          edge='end'\r\n                        />\r\n                      </ListItemIcon>\r\n                      <ListItemText>\r\n                        {\" \"}\r\n                        {todo.task} <br />{\" \"}\r\n                        {moment(todo.createdAt).fromNow(true)} ago\r\n                      </ListItemText>\r\n\r\n                      <Grid xs={2}>\r\n                        {(props.inProgress === \"\" || props.inProgress === todo._id) &&\r\n                          todo.endTime == null && (\r\n                            <div className={classes.wrapper}>\r\n                              <Fab\r\n                                aria-label='save'\r\n                                color='primary'\r\n                                className={props.buttonClassname}\r\n                                onClick={() => props.handleTimerButtonClick(todo)}\r\n                                size='small'>\r\n                                {props.success ? <MdCheck /> : <GiClockwork />}\r\n                              </Fab>\r\n                              {props.timerOn && (\r\n                                <CircularProgress\r\n                                  size={53}\r\n                                  className={classes.fabProgress}\r\n                                  onClick={() => props.handleTimerButtonClick(todo)}\r\n                                />\r\n                              )}\r\n                            </div>\r\n                          )}\r\n                      </Grid>\r\n                      {todo.endTime !== null && (\r\n                        <Checkbox\r\n                          edge='start'\r\n                          checked={todo.isComplete}\r\n                          onClick={props.handleToggle(todo)}\r\n                        />\r\n                      )}\r\n                    </ListItem>\r\n                  </Grid>\r\n                ) : null;\r\n              })}\r\n            </List>\r\n          </Card>\r\n        </div>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GoalList;\r\n",{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":1,"column":16,"nodeType":"127","messageId":"128","endLine":1,"endColumn":24},{"ruleId":"125","severity":1,"message":"129","line":1,"column":26,"nodeType":"127","messageId":"128","endLine":1,"endColumn":35},{"ruleId":"125","severity":1,"message":"126","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"130","line":5,"column":3,"nodeType":"127","messageId":"128","endLine":5,"endColumn":11},{"ruleId":"125","severity":1,"message":"131","line":19,"column":10,"nodeType":"127","messageId":"128","endLine":19,"endColumn":21},{"ruleId":"132","severity":1,"message":"133","line":30,"column":7,"nodeType":"134","endLine":30,"endColumn":9,"suggestions":"135"},{"ruleId":"125","severity":1,"message":"136","line":6,"column":8,"nodeType":"127","messageId":"128","endLine":6,"endColumn":19},{"ruleId":"125","severity":1,"message":"137","line":7,"column":8,"nodeType":"127","messageId":"128","endLine":7,"endColumn":19},{"ruleId":"125","severity":1,"message":"138","line":44,"column":28,"nodeType":"127","messageId":"128","endLine":44,"endColumn":35},{"ruleId":"125","severity":1,"message":"139","line":44,"column":37,"nodeType":"127","messageId":"128","endLine":44,"endColumn":42},{"ruleId":"125","severity":1,"message":"140","line":44,"column":44,"nodeType":"127","messageId":"128","endLine":44,"endColumn":62},{"ruleId":"125","severity":1,"message":"141","line":23,"column":3,"nodeType":"127","messageId":"128","endLine":23,"endColumn":15},{"ruleId":"125","severity":1,"message":"142","line":62,"column":19,"nodeType":"127","messageId":"128","endLine":62,"endColumn":29},{"ruleId":"132","severity":1,"message":"143","line":76,"column":6,"nodeType":"134","endLine":76,"endColumn":8,"suggestions":"144"},{"ruleId":"145","severity":1,"message":"146","line":140,"column":21,"nodeType":"147","messageId":"148","endLine":140,"endColumn":23},{"ruleId":"145","severity":1,"message":"146","line":152,"column":17,"nodeType":"147","messageId":"148","endLine":152,"endColumn":19},{"ruleId":"145","severity":1,"message":"146","line":159,"column":20,"nodeType":"147","messageId":"148","endLine":159,"endColumn":22},{"ruleId":"145","severity":1,"message":"146","line":164,"column":17,"nodeType":"147","messageId":"148","endLine":164,"endColumn":19},{"ruleId":"125","severity":1,"message":"149","line":6,"column":8,"nodeType":"127","messageId":"128","endLine":6,"endColumn":14},{"ruleId":"125","severity":1,"message":"150","line":8,"column":10,"nodeType":"127","messageId":"128","endLine":8,"endColumn":16},{"ruleId":"125","severity":1,"message":"151","line":2,"column":31,"nodeType":"127","messageId":"128","endLine":2,"endColumn":45},{"ruleId":"125","severity":1,"message":"152","line":8,"column":7,"nodeType":"127","messageId":"128","endLine":8,"endColumn":19},{"ruleId":"125","severity":1,"message":"153","line":19,"column":8,"nodeType":"127","messageId":"128","endLine":19,"endColumn":12},{"ruleId":"125","severity":1,"message":"154","line":23,"column":23,"nodeType":"127","messageId":"128","endLine":23,"endColumn":39},{"ruleId":"125","severity":1,"message":"155","line":25,"column":8,"nodeType":"127","messageId":"128","endLine":25,"endColumn":13},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Redirect' is defined but never used.","'useSelector' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["158"],"'CardActions' is defined but never used.","'CardContent' is defined but never used.","'loading' is assigned a value but never used.","'error' is assigned a value but never used.","'redirectToReferrer' is assigned a value but never used.","'setTodoLists' is defined but never used.","'setChecked' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'userId'. Either include them or remove the dependency array.",["159"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Button' is defined but never used.","'MdMenu' is defined but never used.","'actionCreators' is defined but never used.","'initialState' is assigned a value but never used.","'clsx' is defined but never used.","'GiMonumentValley' is defined but never used.","'axios' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"160","fix":"161"},{"desc":"162","fix":"163"},"Update the dependencies array to be: [dispatch]",{"range":"164","text":"165"},"Update the dependencies array to be: [dispatch, userId]",{"range":"166","text":"167"},[818,820],"[dispatch]",[2505,2507],"[dispatch, userId]"]